name: JobTrackerDB CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  GEOSCAPE_API_KEY: ${{ secrets.GEOSCAPE_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  # ========================================
  # BACKEND TESTING & QUALITY ASSURANCE
  # ========================================
  backend-test:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        database: [sqlite]  # Use SQLite for CI, MSSQL for staging/prod

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx

    - name: Run linting
      run: |
        cd backend
        pip install flake8 black isort
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
        black --check app/
        isort --check-only app/

    - name: Run security checks
      run: |
        cd backend
        pip install bandit safety
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Run unit tests
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: sqlite:///./test.db

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/coverage.xml
          backend/coverage.html
          backend/bandit-report.json
          backend/safety-report.json

  # ========================================
  # FRONTEND TESTING & QUALITY ASSURANCE
  # ========================================
  frontend-test:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      run: |
        cd frontend
        npm run lint

    - name: Run type checking
      run: |
        cd frontend
        npx tsc --noEmit

    - name: Run unit tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: frontend/coverage/

  # ========================================
  # DATABASE MIGRATION VALIDATION
  # ========================================
  database-migration:
    name: Database Migration Validation
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Validate migrations
      run: |
        cd backend
        # Create a test database
        python -c "from app.models import Base; from sqlalchemy import create_engine; engine = create_engine('sqlite:///test_migration.db'); Base.metadata.create_all(engine)"
        
        # Test migration generation
        alembic revision --autogenerate -m "test_migration"
        
        # Test migration application
        alembic upgrade head
        
        # Test migration rollback
        alembic downgrade -1

  # ========================================
  # BUILD & PACKAGE
  # ========================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, database-migration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}

    - name: Package backend
      run: |
        cd backend
        pip install -r requirements.txt
        # Create deployment package
        tar -czf backend-package.tar.gz app/ migrations/ requirements.txt alembic.ini

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          frontend/dist/
          backend/backend-package.tar.gz

  # ========================================
  # DEPLOYMENT STAGES
  # ========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: ./artifacts

    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: rsync, docker, or cloud deployment commands
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: ./artifacts

    - name: Deploy to production server
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        
    - name: Run production verification
      run: |
        echo "Verifying production deployment..."
        # Add verification commands here

  # ========================================
  # NOTIFICATIONS & REPORTING
  # ========================================
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic (Slack, email, etc.)
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        # Add failure notification logic 